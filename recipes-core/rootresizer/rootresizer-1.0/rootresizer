#! /usr/bin/env python3

# -*- coding: utf-8 -*-

#######################################################################################################
# Copyright 2019, CPAC Equipment, Inc.
# All rights reserved.
#######################################################################################################

#
# Root resizer
#
# Temporary program to resize root on the way to a version upgrade.
#
import sys
import argparse
import os
import zipfile
import tempfile
import time
import syslog
import io
import json
import subprocess

def RunCommand(cmd):
    with subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=None) as process:
        stdout, stderr = process.communicate()

        rc = process.wait()

    return rc, stdout.decode()

# Resize the root partition.  Return True if we did it.
def ResizeRoot():
    reboot = False
    
    # Obtain the root file system partition information
    rc, results = RunCommand(("findmnt", "-J", "/"))
    if rc == 0:
        output = json.loads(results)

        root_partition_path = output["filesystems"][0]["source"]
        root_partition_base = os.path.basename(root_partition_path)

        send_message("Checking ROOT image")

        # Get current partition size
        rc, results = RunCommand(("lsblk", "-no", "pkname", root_partition_path))
        if rc == 0:
            device = "/dev/" + results.strip()

            # Read partition table information
            rc, results = RunCommand(("lsblk", "-J", "-b", device))
            if rc == 0:
                root_size = None
                devinfo = json.loads(results)
                partitions = devinfo["blockdevices"][0]["children"]
                for part in partitions:
                    if part["name"] == root_partition_base:
                        root_size = int(part["size"])

                if root_size != None and root_size < 1500000000:
                    # Need to resize
                    # Mount read-only and check results
                    if os.system("mount -oremount,ro /") == 0:
                        rc = os.system("fsck -y %s" % root_partition_path)
                        os.system("mount -oremount,rw /")

                        if rc == 0:
                            root_partition_num = root_partition_path[len(device):]
                            # Trim extra stuff from partition number in name
                            while not root_partition_num[0].isdigit():
                                root_partition_num = root_partition_num[1:]

                            root_partition_num = int(root_partition_num)

                            # Get the value to apply to resizing of root partition
                            root_resize = int(devinfo["blockdevices"][0]["size"]) / (1024 * 1024) - 1
                            send_message("Resizing ROOT image...")
                            if os.system("parted %s resizepart %d %d" % (device, root_partition_num, root_resize)) == 0:
                                if os.system("resize2fs %s" % root_partition_path) == 0:
                                    reboot = True
 
                            if not reboot:
                                send_message("Resize ROOT failed")

    return reboot

def GetHomeDir():
    home = os.getenv("USERHOMEDIR")
    if home == None or home == "":
        home = os.getenv("HOME")
    if home == None or home == "":
        home = os.getcwd()
    return home

def send_message(msg, delay=0):
    os.system('psplash-write "MSG %s"' % msg)
    if delay:
        time.sleep(delay)
    # print(msg)

def send_progress(n, total):
    os.system('psplash-write "PROGRESS %d"' % (100 * n / total))
    # print("%d of %d" % (n, total))

class RootResizer():

    def prestart(self):
        os.system("systemctl disable systemupdater")

        reboot =  ResizeRoot()

        if reboot:
            # Sync file system
            os.system('sync')
            # Remove it from running
            os.system("systemctl disable rootresizer")
            # Re-enable systemupdater
            os.system("systemctl enable systemupdater")
            # and reboot
            send_message("Rebooting...", delay=1)
            os.system('reboot -f')
        else:
            # Terminate psplash when not needed
            os.system('psplash-write QUIT')

        return reboot

    def run(self):
                                                     
        self.prestart()

        return 0

def main():
    parser = argparse.ArgumentParser(description="systemupdater")

    parser.add_argument("-w", "--wait", action="store", dest="wait_time", help="Wait time after message.", default=0)
    parser.add_argument("rest", nargs=argparse.REMAINDER)

    args = parser.parse_args()
    
    app = RootResizer()
    rc = app.run()

    return rc

if __name__ == "__main__":
    sys.exit(main())

